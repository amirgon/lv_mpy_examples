#!/opt/bin/lv_micropython
import time
import lvgl as lv
import init_gui
from lv_colors import *


CANVAS_WIDTH  = 200
CANVAS_HEIGHT = 150
LV_IMG_ZOOM_NONE = 256

# create a canvas
rect_dsc = lv.draw_rect_dsc_t()
rect_dsc.init()
rect_dsc.radius = 10
rect_dsc.bg_opa = lv.OPA.COVER
rect_dsc.bg_grad_dir = lv.GRAD_DIR.HOR
rect_dsc.bg_color = LV_COLOR_RED;
rect_dsc.bg_grad_color = LV_COLOR_BLUE
rect_dsc.border_width = 2
rect_dsc.border_opa = lv.OPA._90
rect_dsc.border_color = LV_COLOR_WHITE
rect_dsc.shadow_width = 5
rect_dsc.shadow_ofs_x = 5
rect_dsc.shadow_ofs_y = 5

label_dsc = lv.draw_label_dsc_t()
label_dsc.init()
label_dsc.color = LV_COLOR_YELLOW

cbuf=bytearray(CANVAS_WIDTH * CANVAS_HEIGHT * 4)

canvas = lv.canvas(lv.scr_act(),None)
canvas.set_buffer(cbuf,CANVAS_WIDTH,CANVAS_HEIGHT,lv.img.CF.TRUE_COLOR)
canvas.align(None,lv.ALIGN.CENTER,0,0)
canvas.fill_bg(LV_COLOR_SILVER, lv.OPA.COVER);
canvas.draw_rect(70, 60, 100, 70, rect_dsc)
canvas.draw_text(40, 20, 100, label_dsc, "Some text on text canvas", lv.label.ALIGN.LEFT);

# Test the rotation. It requires an other buffer where the orignal image is stored.
# So copy the current image to buffer and rotate it to the canvas

img = lv.img_dsc_t()
img.data = cbuf[:]
img.header.cf = lv.img.CF.TRUE_COLOR
img.header.w = CANVAS_WIDTH
img.header.h = CANVAS_HEIGHT

def LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h):
    return((((w / 8) + 1) * h))

def LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h):
    return LV_IMG_BUF_SIZE_ALPHA_1BIT(w, h) + 4 * 2

def LV_CANVAS_BUF_SIZE_INDEXED_1BIT(w, h):
    return LV_IMG_BUF_SIZE_INDEXED_1BIT(w, h)
#
# Create a transparent canvas with Chroma keying and indexed color format (palette).
#

# Create a button to better see the transparency
    lv_btn_create(lv_scr_act(), NULL);

*Create a buffer for the canvas
cbuf=byte_array(LV_CANVAS_BUF_SIZE_INDEXED_1BIT(CANVAS_WIDTH, CANVAS_HEIGHT)

# Create a canvas and initialize its the palette
canvas = lv_canvas(lv.scr_act(), None)
canvas.set_buffer(cbuf, CANVAS_WIDTH, CANVAS_HEIGHT, lv._IMG.CF.INDEXED_1BIT)
canvas_set_palette(0, lv.COLOR.TRANSP)
canvas.set_palette(canvas, 1, LV_COLOR_RED)

# Create colors with the indices of the palette
c0 = lv_color_t()
c1 = lv_color_t()

c0.full = 0;
c1.full = 1;

# Transparent background
canvas.fill_bg(c1, lv.OPA.TRANSP)

# Create hole on the canvas
                
#    for( y = 10; y < 30; y++) {
#       for( x = 5; x < 20; x++) {
#         lv_canvas_set_px(canvas, x, y, c0);
        }
while True:
    lv.task_handler()
    time.sleep_ms(5)
